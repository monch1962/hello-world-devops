# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '8.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install and build'
  
- script: |
    SONARCLOUDDIR=/tmp
    wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip -O $SONARCLOUDDIR/sonar.zip
    unzip $SONARCLOUDDIR/sonar.zip -d /tmp
    ls -al $SONARCLOUDDIR
    cat $SONARCLOUDDIR/sonar-scanner-3.2.0.1227-linux/conf/sonar-scanner.properties
    PATH=$SONARCLOUDDIR/sonar-scanner-3.2.0.1227-linux/bin:$PATH
    echo $PATH
    APP_DIR=$(pwd)
    ls -al
    sonar-scanner -h
    sonar-scanner \
    -Dsonar.projectKey=monch1962_hello-world-devops \
    -Dsonar.organization=monch1962-github \
    -Dsonar.sources=. \
    -Dsonar.exclusions=node_modules/** \
    -Dsonar.host.url=https://sonarcloud.io \
    -Dsonar.login=8725538bd2603c6990da57d9c53afe2d176fb844
  displayName: 'Run sonarcloud code quality tests'
    
- script: |
    npm run unittests
  displayName: 'Run unit tests'

- script: |
    # Install the testcafe framework; we're going to use it for UI testing
    npm install -g testcafe
    # Start the app running, and save the PID
    node helloworld.js &
    APP_PID=$!
    #npm run uitests
    testcafe "chrome:headless" test/ui/helloworld.ts
    # Kill the app
    kill $APP_PID
  displayName: 'Run UI tests'

- script: |
    node helloworld.js &
    APP_PID=$!
    wget https://www.dropbox.com/s/sthv0p77c5gip2g/wilee?dl=0 -O wilee
    chmod +x wilee
    ls -l wilee
    APP=http://localhost:8080 TESTCASES=test/api/*.wilee.json ./wilee
    if [ $? -ne 0 ]; then kill $APP_PID && exit 1; fi
    kill $APP_PID
    TESTRESULTS=$(cat test/api/*.result.json)
    echo $TESTRESULTS | jq '.'
    echo $TESTRESULTS | jq 'del(.request, .expect, .actual)'
    FAILED_TESTS=$(echo $TESTRESULTS | jq '.pass_fail' | grep fail | wc -l)
    if [ $FAILED_TESTS -gt 0 ]; then echo $FAILED_TESTS "API tests failed" && exit 1; fi
  displayName: 'Run wilee API tests'

- script: |
    # We need to repoint HTTP_PROXY and HTTPS_PROXY to point to our stub engine (hoverfly). First save the current
    # values of these variables
    OLD_HTTP_PROXY=$HTTP_PROXY
    OLD_HTTPS_PROXY=$HTTPS_PROXY
    # Now repoint them to hoverfly, which will be running as a proxy
    HTTP_PROXY=http://localhost:8500
    HTTPS_PROXY=https://localhost:8500
    # Now start the app running, and capture the PID so we can kill it later
    node helloworld.js &
    APP_PID=$!
    # Get the hoverfly stub engine
    wget https://github.com/SpectoLabs/hoverfly/releases/download/v0.17.7/hoverfly_bundle_linux_amd64.zip -O hoverfly.zip
    unzip hoverfly.zip
    # Start hoverfly running, and read in the stub config. In this case we're going to stub out 
    # the (fictional) trumpwall.com site
    ./hoverctl start
    ./hoverctl import test/integration/trumpwall.com.stub
    # Run the stubbed integration tests
    npm run integrationtests
    if [ $? -ne 0 ]; then kill $APP_PID && HTTP_PROXY=$OLD_HTTP_PROXY && HTTPS_PROXY=$OLD_HTTPS_PROXY && ./hoverctl stop && exit 1; fi

    # Now we've run the stubbed integration tests, repoint HTTP_PROXY and HTTPS_PROXY to their previous values
    HTTP_PROXY=$OLD_HTTP_PROXY
    HTTPS_PROXY=$OLD_HTTPS_PROXY
    # Stop Hoverfly
    ./hoverctl stop
    kill $APP_PID
  displayName: 'Run integration tests (stubbed)'

- script: |
    node helloworld.js &
    APP_PID=$!
    npm install -g artillery
    artillery -V
    artillery run test/performance/performance.yml
    kill $APP_PID
  displayName: 'Run Artillery performance test'
